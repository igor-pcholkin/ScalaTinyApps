package lifegame

trait Helpers {
  def right(dx: Int) = (cell: (Int, Int)) => (cell._1 + dx, cell._2)
  def down(dy: Int) = (cell: (Int, Int)) => (cell._1, cell._2 + dy) 
}

object Configurations extends Helpers {
  type Configuration = Set[(Int, Int)]
  
  val dismissing = Set((5, 5), (5, 4), (4, 4), (3, 3))
  val glider = Set((1, 0), (2, 1), (0, 2), (1, 2), (2, 2))
  val constant = Set((3,3), (3, 5), (2, 4), (4, 4))
  val cross = Set((3,3), (3, 4), (3, 5), (2, 4), (4, 4))
  val cross4 = Set((3,3), (3, 4), (3, 5), (3, 6), (2, 4), (4, 4))
  val cross2 = Set((3,3), (4, 4), (5, 5), (5, 3), (3, 5))
  val square = Set((3,3), (4, 3), (5, 3), (3, 4), (5, 4), (3, 5), (4, 5), (5, 5) )
  val cool1 = (square map right(5)) ++ (cross map right(8) )
  val growingCool = (square map right(15)) ++ (cross map right(19) ) map down(15)
  val gliderAndCross = glider ++ (cross2 map right(10) map down(10) )
  val gliderAndSquare = glider ++ (square map right(10) map down(10) )
  val gun = Set((5, 5), (6, 5), (7, 5), (8, 5), (9, 5), (8, 4), (5, 6), (5, 7), (6, 6))
  val gun2 = Set((5, 5), (6, 5), (7, 5), (8, 5), (9, 5), (8, 4), (5, 6), (7, 6))
  val tinyChess = Set((5, 5), (7, 5), (6,6), (8, 6))
  val smallChess = Set((5, 5), (7, 5), (6,6), (8, 6), (5, 7), (7, 7), (6,8), (8, 8))
  val chess = Set((5, 5), (7, 5), (6,6), (8, 6), (5, 7), (7, 7), (6,8), (8, 8),
        (5, 9), (7, 9), (6,10), (8, 10), (5, 11), (7, 11), (6, 12), (8, 12))
  val key = Set((5, 5), (5, 7), (4, 6), (6, 6), (7, 6), (8, 6), (9, 6), (10, 6), (9, 7))
  val rabbit = Set((2, 1), (4, 1), (2, 2), (3, 2), (1, 3), (2, 3), (3, 3), (1, 4), (2, 3), (3, 4), (3, 5), (4, 5), 
      (2, 6), (3, 6), (4, 6), (5, 6), (3, 7),(4, 7), (5, 7), (6, 7), (3, 8),(4, 8), (5, 8), (6, 8), (2, 9), (3, 9), (5, 9))
  val smile = Set((2, 1), (4, 1), (1, 3), (2, 4), (3, 4), (4, 4), (5, 3))
  val flower = Set((2,2), (2, 4), (1,3), (3,3), (2, 5), (2,6), (2, 7), (1, 5), (3, 5))
  val heart = Set((2, 1), (4, 1), (1, 2), (3, 2), (5, 2), (1, 3), (5, 3), (2, 4), (4,4), (3, 5))
  val cloud = Set((2, 1), (4, 1), (6, 1), (1, 2), (3, 2), (5, 2), (7, 2), (1, 3), (7, 3), (2, 4), (3, 4), (4,4), (5, 4), (6, 4))
  val aLetter = Set((3,3), (2,4), (2,5), (2, 6), (4,4), (4, 5), (4, 6), (3, 5))
  val bLetter = Set((1,1), (2,1), (3,1), (1, 2), (3,2), (1, 3), (2, 3), (1, 4), (3, 4), (1, 5), (2, 5), (3, 5))
  val one = Set((3,1), (2, 2), (3,2), (1,3), (3,3), (3, 4), (3, 5), (3,6))
  val two = Set((1,1), (2,1), (3,1), (3,2), (3,3), (2, 3), (1,3), (1, 4), (1, 5), (2, 5), (3, 5))
  val three = Set((1,1), (2,1), (3,1), (3,2), (3,3), (2, 3), (1,3), (3, 4), (1, 5), (2, 5), (3, 5))
  val cross3 = Set((2,1), (2,2), (1,2), (3,2), (2, 3))
  val pine = Set((2,1), (2,2), (1,2), (3,2), (2, 3), (1, 4), (2, 4), (3, 4), (2, 5))
  val wave = Set((1,2), (2,1), (3,1), (4,2), (5, 3), (6, 3), (7, 2), (1, 3), (7, 1))
  val moon = Set((1,1), (2,2), (2,3), (2,4), (1, 5))
  val wLetter = Set((1, 0), (5, 0), (1,1), (3,1), (5,1), (1, 2), (3,2), (5,2), (1, 3), (3, 3), (5, 3), (2, 4), (4, 4))
  val sun = Set((1, 1), (3,1), (5,1), (2,2), (3,2), (4,2), (1,3), (2, 3), (3,3), (4,3), (5,3), (2,4), (3,4), (4,4), (1, 5), (3,5), (5,5))
  val arrow = Set((1,2), (2,2), (3,1), (3,2), (3,3), (4,2))
  val fish = Set((1,1), (4,1), (2,2), (3,2), (4,2), (5, 2), (1,3), (4,3))
  val star = Set((3,1), (1,2), (2,2), (3,2), (4,2), (5,2), (2,3), (3, 3), (4,3), (2, 4), (4, 4))
  val davidstar = Set((3,1), (1,2), (2,2), (4,2), (5,2), (2,3), (4,3), (1,4), (2,4), (4,4), (5,4), (3,5))

  val initConfiguration = davidstar map (right(30) andThen down(30))
}